import re, os, time, requests, json, logging
from pathlib import Path
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from calculation import calculate_customs_duty
from dict_for_replace import translate_korean
from datetime import datetime
from service_currency.scheduler import run_scheduler_in_background
from service_currency.storage import load_rate_eur, load_rate_krw, load_rate_usd, load_rate_date

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='encar_bot.log',
    format='%(asctime)s %(levelname)s %(message)s',
    level=logging.INFO,
    encoding='utf-8'
)

# logging.getLogger("httpx").setLevel(logging.WARNING)
# logging.getLogger("httpcore").setLevel(logging.WARNING)

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω
# BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_KEY_TOKEN")
BOT_TOKEN = "8415744143:AAGqAwOG87nffdLeHLQh0ob4O3FhTl94Ohw"

API_URL_TEMPLATE = "https://api.encar.com/v1/readside/vehicle/{}"

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ –ª–æ—Ç–∞ (7-8 —Ü–∏—Ñ—Ä, –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏)
LOT_ID_REGEX = re.compile(r"(\d{7,8})")

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è JSON —Ñ–∞–π–ª–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
def wait_until_json_ready(path: Path, timeout: float = 120.0, poll: float = 0.5) -> bool:
    """–ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ñ–∞–π–ª –∏ –æ–Ω –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–º JSON (–Ω–µ –ø—É—Å—Ç–æ–π/–Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π)."""
    deadline = time.monotonic() + timeout
    while time.monotonic() < deadline:
        if path.exists() and path.stat().st_size > 0:
            try:
                with open(path, "r", encoding="utf-8") as f:
                    json.load(f)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                return True
            except Exception:
                # —Ñ–∞–π–ª –µ—â—ë –ø–∏—à–µ—Ç—Å—è –∏–ª–∏ –±–∏—Ç—ã–π ‚Äî –ø–æ–¥–æ–∂–¥—ë–º
                pass
        time.sleep(poll)
    return False

# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 100000 –≤ 100 000
def formatted_cost(value):
    return f"{int(value/1000)*1000:,}".replace(',', ' ')

def extract_lot_id(text: str) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞/—Å—Å—ã–ª–∫–∏"""
    match = LOT_ID_REGEX.search(text)
    return match.group(1) if match else None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    user_id = update.message.from_user.id
    lot_id = extract_lot_id(user_input)

    if not lot_id:
        reply = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ—Ç."
        await update.message.reply_text(reply)
        # logging.info(f"[user_id: {user_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {user_input}")
        return

    api_url = API_URL_TEMPLATE.format(lot_id)
    try:
        response = requests.get(api_url, timeout=10)
        if response.status_code != 200:
            reply = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API (–∫–æ–¥ {response.status_code})."
            await update.message.reply_text(reply)
            # logging.error(f"[user_id: {user_id}] API error {response.status_code}: {api_url}")
            return

        data = response.json()
        # logging.info("API JSON for lot_id=%s: %s", lot_id, json.dumps(data, ensure_ascii=False))

        kurs_krw = load_rate_krw()
        kurs_euro = load_rate_eur()
        kurs_usd = load_rate_usd()

        auto_manuf = data.get("category", {}).get("manufacturerName") or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        auto_model = data.get("category", {}).get("modelGroupName") or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        fuel_name = data.get("spec", {}).get("fuelName") or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        auto_displacement = data.get("spec", {}).get("displacement") or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        auto_year = data.get("category", {}).get("yearMonth") or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        formatted_auto_year = datetime.strptime(auto_year, "%Y%m").strftime("%m.%Y")
        customs_value_eur = data.get("advertisement", {}).get("price") * 1.1 * 10000 * kurs_krw / kurs_euro or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        print("user_id:", user_id, auto_displacement, formatted_auto_year, customs_value_eur)

        customs_duty = calculate_customs_duty(auto_displacement, formatted_auto_year, customs_value_eur)
        # print("customs_duty: ",customs_duty)

        value = int(customs_value_eur*kurs_euro/1000)*1000
        formatted_value = f"{value:,}".replace(',', ' ')
        duty_rub = int(customs_duty*kurs_euro/1000)*1000 + 17000
        formatted_duty_rub = f"{duty_rub:,}".replace(',', ' ')
        extra_costs_korea = 127000
        extra_costs_russia = 150000
        agentskie_uslugi = 100000
        #summary = int(customs_value_eur*kurs_euro) + int(customs_duty*kurs_euro) + extra_costs_korea + extra_costs_russia + agentskie_uslugi
        summary = int(customs_value_eur*kurs_euro) + int(customs_duty*kurs_euro) + extra_costs_korea + extra_costs_russia + agentskie_uslugi + 17000

        summary = f"{int(summary/1000)*1000:,}".replace(',', ' ')

        reply = (
            f"üöó *–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ Encar*\n"
            f"üì¶ –õ–æ—Ç: [{lot_id}](https://fem.encar.com/cars/detail/{lot_id})\n"
            f"      {translate_korean(auto_manuf)} - {translate_korean(auto_model)} - {formatted_auto_year}\n"
            f"      –î–≤–∏–≥–∞—Ç–µ–ª—å: {auto_displacement} cc, {translate_korean(fuel_name)}\n\n"
            f"*üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ –ö–æ—Ä–µ–µ*\n~ {formatted_value} RUB\n"
            f"*üßæ –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞*\n~ {formatted_duty_rub} RUB\n"
            f"*üßæ –†–∞—Å—Ö–æ–¥—ã –ø–æ –ö–æ—Ä–µ–µ (–¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ—Ä—Ç, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —Ñ—Ä–∞—Ö—Ç –∏ –ø—Ä–æ—á–µ–µ)*\n~ {formatted_cost(extra_costs_korea)} RUB\n"
            f"*üßæ –†–∞—Å—Ö–æ–¥—ã –ø–æ –†–æ—Å—Å–∏–∏ (–°–ë–ö–¢–°, –≠–ü–¢–°, –±—Ä–æ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ—á–µ–µ)*\n~ {formatted_cost(extra_costs_russia)} RUB\n"
            f"*üßæ –ê–≥–µ–Ω—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏*\n~ 100 000 RUB\n\n"
            f"*üìç–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –ø–æ–¥ –∫–ª—é—á –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ* (–¥–æ—Å—Ç–∞–≤–∫–∞ 8-14 –¥–Ω–µ–π)\n"
            f"‚û°Ô∏è ~ {summary} RUB \n\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∞–≤—Ç–æ–≤–æ–∑–æ–º –ø–æ –†–æ—Å—Å–∏–∏:\n"
            f"üì¶ –¥–æ –ú–æ—Å–∫–≤—ã: +190 000 RUB\n"
            f"üì¶ –¥–æ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞: +200 000 RUB\n"
            f"üöó –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –†–§ ‚Äî –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n"
            # f"üì≤ –ó–∞–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ –∏–∑ –ö–æ—Ä–µ–∏ ‚Äî [Car Pride](https://t.me/Car_pride)\n"
            f"üì≤ –ó–ê–ö–ê–ñ–ò –≠–¢–û –ê–í–¢–û [–ó–î–ï–°–¨](https://t.me/Car_pride) ‚û°Ô∏èÔ∏è ‚Äî [Car Pride](https://t.me/Car_pride)\n"
            f"üì≤ –ó–ê–ö–ê–ñ–ò –≠–¢–û –ê–í–¢–û [–ó–î–ï–°–¨](https://t.me/Car_pride) ‚û°Ô∏èÔ∏è ‚Äî [Car Pride](https://t.me/Car_pride)\n"
            f"üì≤ –ó–ê–ö–ê–ñ–ò –≠–¢–û –ê–í–¢–û [–ó–î–ï–°–¨](https://t.me/Car_pride) ‚û°Ô∏èÔ∏è ‚Äî [Car Pride](https://t.me/Car_pride)\n\n"
            f"‚û°Ô∏è EUR: {kurs_euro} USD: {kurs_usd} –û–±–Ω–æ–≤–ª–µ–Ω–æ {load_rate_date()}\n"
        )

        await update.message.reply_text(reply, parse_mode="Markdown")
        # logging.info(f"[user_id={user_id}] lot_id={lot_id}: customs_value={customs_value_eur}, customs_duty={customs_duty}")

    except Exception as e:
        reply = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await update.message.reply_text(reply)
        # logging.exception(f"[user_id: {user_id}] Exception: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–æ—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

def main():
    run_scheduler_in_background()
    FILE = Path("service_currency/currency_rate.json")
    print(f"–ñ–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è {FILE.resolve()} ...", flush=True)

    if not wait_until_json_ready(FILE, timeout=180, poll=0.5):
        print("–§–∞–π–ª —Å –∫—É—Ä—Å–∞–º–∏ —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å.", flush=True)
        return

    print("–§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞‚Ä¶", flush=True)

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
    app.run_polling()

if __name__ == "__main__":
    main()
